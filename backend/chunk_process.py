import subprocess
import os
import glob


def create_segments(numberOfSegment, baseName):
    """ Use the splitIntoNSegments function of imod to create folder ready of subtomogram averaging
    :param numberOfSegment: int
    :param baseName: string
    """
    try:
        path_to_mtv_list = os.path.relpath(glob.glob("*RefP*.csv")[0])
    except IndexError:
        print("Could not find any file following the structure : *RefP*.csv please fix and retry\n")
        exit(2)
    command = "splitIntoNSegments {nbr} {name}_PtsAdded_Twisted.mod {mtv}".format(nbr=numberOfSegment, name=baseName,
                                                                                  mtv=path_to_mtv_list)
    subprocess.run(command, shell=True)


def lancer_parser_segment(base_name_with_segment, segment_number):
    """ Parse the prm using prmParser from imod to prepare com files for chunk processing
    :param base_name_with_segment: string
    :param segment_number: int
    :return: always True
    """
    working_dir = os.getcwd() + '/{}'.format("segment" + str(segment_number))
    # User must be in folder containing segment folder
    os.chdir(working_dir)

    # Parser
    command_parser = "prmParser " + base_name_with_segment + ".prm"
    subprocess.run(command_parser, shell=True)  # should be waiting before doing next (independant of shell = True)
    os.chdir("..")
    return True


def lancer_parser(base_name):
    """ Parse the prm using prmParser from imod to prepare com files for chunk processing
    :param base_name: string
    :return: always True
    """
    # Parser
    command_parser = "prmParser " + base_name + ".prm"
    subprocess.run(command_parser, shell=True)  # should be waiting before doing next (independant of shell = True)
    return True


def lancer_process_chunk_fullmt(base_name: str, number_core):
    """ Use the processchunks functions from imod to process chunks using com files generated by prm parser
    :param number_core: int
    :param base_name: str
    :return: a pointer to a stream
    """
    # Generate average
    command_process = "processchunks -g -P -c " + base_name + ".cmds localhost:" + str(
        number_core) + " " + base_name
    proc = subprocess.Popen(command_process, shell=True)  # popen necessary for parallel processing
    return proc


def lancer_process_chunk_segment(base_name: str, segment_number: int, number_core):
    """ Use the processchunks functions from imod to process chunks using com files generated by prm parser
    :param number_core: int
    :param base_name: str
    :param segment_number: int
    :return: a pointer to a stream
    """
    base_name_with_segment = base_name + '_S' + str(segment_number)
    working_dir = os.getcwd() + '/{}'.format("segment" + str(segment_number))
    # User must be in folder containing segment folder
    os.chdir(working_dir)  # Number of processor to use for the command.

    # Generate average
    command_process = "processchunks -n 13 -g -P -c " + base_name_with_segment + ".cmds localhost:" + str(
        number_core) + " " + base_name_with_segment
    proc = subprocess.Popen(command_process, shell=True)  # popen necessary for parallel processing
    os.chdir("..")
    return proc
